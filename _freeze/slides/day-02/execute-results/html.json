{
  "hash": "2614dddf49faa73741fc233f87e18ebc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Writing with code\"\nsubtitle: \"An introduction to Literate Programming with R and Quarto\"\ndate: \"2024-01-19\"\ncategories: [quarto, r, recipes, github, rstudio]\n---\n\n\n## Overview\n\n- Literate Programming\n- Quarto\n- Lab 00: Writing with code\n\n# Literate Programming\n\n## Literate Programming\n\nLiterate programming is an approach to programming in which code, documentation, and results are all interwoven into a single document.\n\n- Encourages stating the problem and solution in plain language\n- Encourages writing code that is easy to read and understand\n- Includes more explicit documentation than traditional code comments\n- Facilitates reproducible research\n\n# Quarto\n\n## Quarto\n\n[Quarto](https://quarto.org/docs/gallery/) is a document generation system that supports literate programming. It is designed to support a wide range of document types (HTML, PDF, Word, etc.) and programming languages (R, Python, Julia, etc.).\n\n````quarto\n---\ntitle: \"My First Quarto Document\"\nformat: html\n---\n\n## Intro to Quarto\n\nThis is a code block which simply prints a message.\n\n```{{r}}\n#| label: example-code\n\nprint(\"My name is Quarto\")\n```\n````\n\n## Quarto + Markdown\n\nIn Quarto, prose is written in [Markdown](https://quarto.org/docs/authoring/markdown-basics.html). Markdown is a lightweight markup language that is easy to read and write.\n\n\n| Markdown | HTML |\n| --- | --- |\n| `# Heading` | Heading |\n| `**bold**` | **bold** |\n| `footnote^[Footnote info...]` | footnote^[Footnote info...] |\n| `- bullets` | - bullets |\n| `[links](https://quarto.org)` | [links](https://quarto.org) |\n\n## Quarto + R\n\n[Code blocks](https://quarto.org/docs/computations/r.html#code-blocks) in Quarto introduce sections where code can be executed.\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n````quarto\n```{{r}}\n#| label: fig-example-plot\n#| fig-cap: A simple plot\n\nggplot(\n  data,\n  aes(x = cat, y = passive)\n) +\n  geom_col() +\n  labs(\n    x = \"Categories\",\n    y = \"Passives (count)\"\n  )\n```\n````\n:::\n\n::: {.column width=\"40%\" .r-stretch}\n\n::: {.cell}\n::: {.cell-output-display}\n![A simple plot](day-02_files/figure-revealjs/fig-example-code-show-1.png){#fig-example-code-show width=960}\n:::\n:::\n\n:::\n\nThe code here generates the plot in @fig-example-code-show.\n\n::::\n\n\n# Lab 00: Writing with code\n\n## Setup\n\nIn [lab 00](https://github.com/lin-380-s24/lab-00), you will create a basic Quarto document and explore some of the features of Quarto.\n\n::: {.panel-tabset}\n\n### Clone the lab\n\n- Copy the clone URL for the lab 00 repository\n- Open RStudio (with Docker Desktop running)\n- Create a new project from version control\n- Paste the clone URL into the repository URL field\n\n::: {.aside}\nSee [Get up to speed with Git and GitHub](../guides/get-up-with-git.html)\n:::\n\n### Complete the lab\n\n- Follow the instructions in the README.md file\n:::\n\n::: {.aside}\nRemember you can use the [Recipe 00](https://qtalr.github.io/qtalrkit/articles/recipe-0.html) as a reference, or even other documentation on the [Quarto website](https://quarto.org/).\n:::\n",
    "supporting": [
      "day-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}