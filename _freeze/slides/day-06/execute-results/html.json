{
  "hash": "adc547b693c64a4b58c880916811902a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reading, inspecting, and writing datasets\"\nsubtitle: \"First approach at combining Quarto and R\"\ndate: \"2024-02-02\"\ncategories: [quarto, r, readr, dplyr]\ntags: [read_csv, glimpse, slice_head, glimpse, select]\n---\n\n\n## Overview\n\n- Quarto + code blocks\n- Packages\n- Reading with `readr`\n- Inspecting with `dplyr`\n- Writing with `readr`\n- Lab 02: [Dive into datasets](https://github.com/lin-380-s24/lab-02)\n\n# Quarto + code blocks\n\n## Code block options\n\n:::: {.columns}\n::: {.column width=\"60%\"}\nAs the **front-matter** controls the behavior of the document, the **code block options** control the behavior of the code.\n\nIf not specified, the default behavior is to show the code, evaluate it, and display the output. If there are any warnings or errors, they will be displayed as well.\n:::\n\n::: {.column width=\"40%\"}\n[Default behavior:]{style=\"font-size: .75em;\"}\n```{{r}}\n#| echo: true\n#| include: true\n#| message: true\n\n1 + 1\n```\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n[Has the same result as:]{style=\"font-size: .75em;\"}\n\n```{{r}}\n1 + 1\n```\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## Code block options\n\nWe can change these defaults, as needed.\n\n:::: {.columns}\n::: {.column width=\"30%\"}\n[No code]{style=\"font-size: .75em;\"}\n```{{r}}\n#| echo: false\n\n1 + 1\n```\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n[No code or output]{style=\"font-size: .75em;\"}\n```{{r}}\n#| include: false\n\n1 + 1\n```\n:::\n\n::: {.column width=\"30%\"}\n[No messages]{style=\"font-size: .75em;\"}\n```{{r}}\n#| message: false\n\n1 + 1\n```\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n:::\n::::\n\n::: {.aside}\nThere are many other options that can be used to control the behavior of the code blocks. For a complete list, see the [Quarto documentation](https://quarto.org/docs/output-formats/html-code.html).\n:::\n\n## Code block: example\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n```{{r}}\n# Load libraries\nlibrary(tidyverse)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading libraries\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n```{{r}}{code-line-numbers=\"|2\"}\n#| message: false\n# Load libraries\nlibrary(tidyverse)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading libraries\nlibrary(tidyverse)\n```\n:::\n\n:::\n::::\n\n# Packages\n\n## Loading packages\n\nR packages that are installed in the system exist in a \"library\". These packages can be loaded (checked out) using the `library()` function.\n\n```{{r}}\n#| label: load-packages\n#| message: false\n\n# Load packages\nlibrary(readr)     # for reading/ writing datasets\nlibrary(dplyr)     # for data manipulation\n```\n\nNow the functions from the `readr` [@R-readr] and `dplyr` [@R-dplyr] packages are available for use.\n\n# Reading with `readr`\n\n## About `readr`\n\n![](images/hex-readr.png){.absolute top=0 right=0 width=\"10%\"}\n\nThe `readr` package provides a set of functions for reading and writing data and datasets.\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nData:\n\n- `read_file_raw()`: for reading in raw data\n- `read_lines()`: for reading in lines of a file\n- *etc.*\n:::\n\n::: {.column width=\"50%\"}\nDatasets:\n\n- `read_csv()`: for reading comma-separated values\n- `read_tsv()`: for reading tab-separated values\n- *etc.*\n:::\n::::\n\n## Reading a dataset\n\nLet's read a CSV file. The file is called `corpora-vss.csv` and is located in the `data` folder.\n\n```bash\nproject/\n  ├── data/\n  │   └── corpora-vss.csv\n  └── my_file.qmd\n```\n\nTherefore, we use this 'path' to read the file:\n\n```{{r}}{code-line-numbers=\"|6\"}\n#| label: read-dataset\n#| message: false\n\n# Read dataset\nvss_df <- read_csv(\"data/corpora-vss.csv\")\n```\n\n::: {.aside}\n[Very Short Stories](http://www.schtepf.de/History/pages/stories.html) @R-corpora\n:::\n\n## R objects: Data frame\n\nThe `read_csv()` function returns a data frame, which is a type of R object which is rectangular (has rows and columns) and can store different types of data (vectors).\n\nTo confirm that we have a data frame object, we can use the `class()` function.\n\n```{{r}}{code-line-numbers=\"|5\"}\n#| label: check-if-df\n\n# Preview dataset\nclass(vss_df)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n\n\n:::\n:::\n\n\n::: {.fragment .fade-in}\nThe output should contain `data.frame`. \\\nIt does! ... and some other information....\n:::\n\n## R objects: Tibble\n\nThe `read_csv()` function returns a tibble, which is a type of R object that is similar to a data frame, but has some nice user-friendly features.\n\n:::: {.columns style=\"font-size: .75em;\"}\n::: {.column width=\"40%\"}\n- Prints the dimensions of the data frame\n- Prints the vector type of each column (variable)\n- Only prints first 10 rows\n- Only prints the columns that fit on the screen\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nvss_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,043 × 6\n   story sentence word        pos   lemma       nchar\n   <chr>    <dbl> <chr>       <chr> <chr>       <dbl>\n 1 264          1 The         DT    the             3\n 2 264          1 constant    JJ    constant        8\n 3 264          1 hum         NN    hum             3\n 4 264          1 of          IN    of              2\n 5 264          1 the         DT    the             3\n 6 264          1 Toshiba     NP    toshiba         7\n 7 264          1 DM-707/40   CD    dm-707/40       9\n 8 264          1 fully       RB    fully           5\n 9 264          1 integrated  VBN   integrate      10\n10 264          1 alarm-clock NN    alarm-clock    11\n# ℹ 8,033 more rows\n```\n\n\n:::\n:::\n\n:::\n::::\n\n# Inspecting with `dplyr`\n\n## About `dplyr`\n\n![](images/hex-dplyr.png){.absolute top=0 right=0 width=\"10%\"}\n\nThe `dplyr` package provides a set of functions for data manipulation. We will look a few of these functions.\n\n- `glimpse()`: for a compact summary of the data\n- `slice_head()`: for a preview of the first `n = ` rows\n- `slice_tail()`: for a preview of the last `n = ` rows\n- `slice_sample()`: for a random sample of `n = ` rows\n- `arrange()`: for sorting rows by column values\n- `select()`: for selecting columns (variables)\n- `filter()`: for filtering rows by column values\n\n## Quick summary\n\nThe `glimpse()` function provides a compact summary of the data.\n\n::: {style=\"font-size: .75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preview dataset\nglimpse(vss_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 8,043\nColumns: 6\n$ story    <chr> \"264\", \"264\", \"264\", \"264\", \"264\", \"264\", \"264\", \"264\", \"264\"…\n$ sentence <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2…\n$ word     <chr> \"The\", \"constant\", \"hum\", \"of\", \"the\", \"Toshiba\", \"DM-707/40\"…\n$ pos      <chr> \"DT\", \"JJ\", \"NN\", \"IN\", \"DT\", \"NP\", \"CD\", \"RB\", \"VBN\", \"NN\", …\n$ lemma    <chr> \"the\", \"constant\", \"hum\", \"of\", \"the\", \"toshiba\", \"dm-707/40\"…\n$ nchar    <dbl> 3, 8, 3, 2, 3, 7, 9, 5, 10, 11, 11, 5, 2, 2, 5, 1, 7, 4, 2, 3…\n```\n\n\n:::\n:::\n\n:::\n\nThis particularly useful when the number of variables is large and the tibble gets truncated on the screen.\n\n## Sort and preview\n\nThe `arrange()` function sorts the rows of the data frame by the values of a column.\nThe `slice_head()` function previews the first `n = ` rows of the data frame.\n\n::: {style=\"font-size: .75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_head(arrange(vss_df, desc(nchar)), n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  story                           sentence word                pos   lemma nchar\n  <chr>                              <dbl> <chr>               <chr> <chr> <dbl>\n1 264                                  156 potassium-nitrate-… JJ    pota…    23\n2 264                                  156 copper-sulphate-bl… JJ    copp…    20\n3 264                                    8 state-of-the-art    JJ    stat…    16\n4 264                                   35 non-governmental    JJ    non-…    16\n5 An Example of Idiomatic English      409 enthusiastically    RB    enth…    16\n```\n\n\n:::\n:::\n\n:::\n\nThis code works, but is not very readable. We can use the `pipe` operator `|>` to make it more readable!\n\n## Sort and preview v.2\n\nThe `pipe` operator `|>` allows us to chain functions together in a more readable way.\n\n::: {style=\"font-size: .75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nvss_df |>             # data frame\n  arrange(-nchar) |>  # sort by nchar (desc)\n  slice_head(n = 5)   # preview first 5 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  story                           sentence word                pos   lemma nchar\n  <chr>                              <dbl> <chr>               <chr> <chr> <dbl>\n1 264                                  156 potassium-nitrate-… JJ    pota…    23\n2 264                                  156 copper-sulphate-bl… JJ    copp…    20\n3 264                                    8 state-of-the-art    JJ    stat…    16\n4 264                                   35 non-governmental    JJ    non-…    16\n5 An Example of Idiomatic English      409 enthusiastically    RB    enth…    16\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.aside}\nUse the keyboard short: {{< kbd win=Shift-Ctrl-M mac=Shift-Command-M >}} to insert the `|>` operator.\n:::\n\n## Select columns and/or rows\n\nThe `select()` function selects columns (variables) from the data frame.\nThe `filter()` function selects rows based on the values of a column.\n\n:::: {.columns style=\"font-size: .75em;\"}\n::: {.column width=\"65%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter rows\nvss_df |>\n  filter(nchar > 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 160 × 6\n   story sentence word             pos   lemma            nchar\n   <chr>    <dbl> <chr>            <chr> <chr>            <dbl>\n 1 264          1 alarm-clock      NN    alarm-clock         11\n 2 264          1 mercilessly      RB    mercilessly         11\n 3 264          2 resemblance      NN    resemblance         11\n 4 264          3 alarm-clock      NN    alarm-clock         11\n 5 264          7 communicated     VBD   communicate         12\n 6 264          8 state-of-the-art JJ    state-of-the-art    16\n 7 264          8 alarm-clock      NN    alarm-clock         11\n 8 264         16 recognition      NN    recognition         11\n 9 264         17 pronunciations   NNS   pronunciation       14\n10 264         17 interspersed     VBN   intersperse         12\n# ℹ 150 more rows\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"35%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select columns\nvss_df |>\n  filter(pos == \"NN\") |>\n  select(sentence, word)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,101 × 2\n   sentence word       \n      <dbl> <chr>      \n 1        1 hum        \n 2        1 alarm-clock\n 3        1 sleep      \n 4        2 side       \n 5        2 sound      \n 6        2 resemblance\n 7        2 equivalent \n 8        3 alarm-clock\n 9        3 volume     \n10        3 hum        \n# ℹ 1,091 more rows\n```\n\n\n:::\n:::\n\n:::\n::::\n\n## Assigning output\n\nIf you want to save the output of a function, you can use the assignment operator `<-`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter rows\nlong_nn_vss <-                    # assign output (of the following...)\n  vss_df |>                       # data frame\n  filter(nchar > 10, pos == \"NN\") # filter rows (two conditions)\n\n# Preview\nslice_head(long_nn_vss, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  story sentence word        pos   lemma       nchar\n  <chr>    <dbl> <chr>       <chr> <chr>       <dbl>\n1 264          1 alarm-clock NN    alarm-clock    11\n2 264          2 resemblance NN    resemblance    11\n3 264          3 alarm-clock NN    alarm-clock    11\n4 264          8 alarm-clock NN    alarm-clock    11\n5 264         16 recognition NN    recognition    11\n```\n\n\n:::\n:::\n\n\n::: {.aside}\nYou can use the keyboard shortcut: {{< kbd win=Alt-- mac=Option-- >}} to insert the assignment operator `<-`.\n:::\n\n# Writing with `readr`\n\n## Writing a dataset\n\nThe `readr` package includes functions for writing datasets, similar to the functions for reading datasets. We will use the `write_csv()` function to write a data frame to a CSV file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write dataset\nwrite_csv(long_nn_vss, \"data/long-nn-vss.csv\")\n```\n:::\n\nNow the file `long-nn-vss.csv` is located in the `data/` folder.\n```bash\nproject/\n  ├── data/\n  │   ├── long-nn-vss.csv\n  │   └── corpora-vss.csv\n  └── my_file.qmd\n```\n\n# Lab 02: Dive into datasets\n\n## Setup\n\n- Clone the [Lab 02 repository](https://github.com/lin-380-s24/lab-02) from GitHub\n- Open the project in RStudio\n- Follow the instructions in `README.md`\n\n::: {.aside}\nRemember you can use the [Recipe 02](https://qtalr.github.io/qtalrkit/articles/recipe-2.html) as a reference, or even other documentation on the [Quarto website](https://quarto.org/).\n\nTo find out more about the `readr` and `dplyr` packages, you can use the `help()` function in R or the `?` operator (e.g. `?read_csv`).\n:::\n\n## Looking ahead\n\n:::: {.columns}\n::: {.column width=\"60%\"}\nCurrent tasks\n\n1. Lab 02: Dive into datasets\n:::\n\n::: {.column width=\"40%\"}\nNext week\n\n1. Reading: [Analysis](https://qtalr.github.io/book/approaching-analysis.html)\n   - Annotate with Hypothes.is\n2. Lessons (Swirl): Summarizing data, Visual summaries\n:::\n::::\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}