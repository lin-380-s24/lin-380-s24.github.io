{
  "hash": "d55da2de8d3e8f4d0835f93b328a6acc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Trace the datascape\"\nsubtitle: \"Descriptive assessment of datasets\"\ndate: \"2024-02-09\"\ncategories: [ggplot2, skimr, janitor, knitr, summarize(), group_by(), count(), tabyl(), kable(), geom_*()]\nwebr:\n  show-startup-message: false\n  packages: ['dplyr', 'knitr', 'ggplot2', 'skimr', 'corpora', 'janitor', 'kableExtra']\n  message: false\n---\n\n\n## Overview\n\n- Statistical overviews\n- Data summaries\n- Visual summaries\n- Lab 03: Trace the datascape\n\n\n\n\n\n```{webr-r}\n#| context: setup\n\n# Read the dataset from the `corpora` package\nbrown_fam_df <-\n  corpora::PassiveBrownFam |> # reference the dataset\n  as_tibble() # convert to a tibble\n\n# Rename variables\nbrown_fam_df <-\n  brown_fam_df |> # pass the original dataset\n  rename( # rename variables: new_name = old_name\n    variety = lang,\n    num_words = n.words,\n    act_verbs = act,\n    pass_verbs = pass,\n    verbs = verbs,\n    pct_passive = p.pass\n  ) |>\n  select(-corpus, -section, -period, -id) |>\n  mutate(id = row_number(), genre = stringr::str_to_title(genre)) |>\n  select(id, everything())\n```\n\n## Statistical overviews{.smaller .scrollable}\n\n::: {.panel-tabset}\n### skim()\n```{webr-r}\n# Use skim() to get all variables\nbrown_fam_df |>\n  skim()\n\n# Use skim() |> yank(\"var_type\") to get specific types (e.g. \"character\", \"numeric\", etc.)\nbrown_fam_df |>\n  skim() |>\n  yank(\"numeric\")\n```\n\n### summarize()\n```{webr-r}\n# Use summarize() to get summary statistics\nbrown_fam_df |>\n  summarize(\n    mean = mean(num_words),\n    sd = sd(num_words),\n    median = median(num_words),\n    iqr = IQR(num_words)\n  )\n```\n:::\n\n## Data summaries{.smaller .scrollable}\n\n::: {.panel-tabset}\n### count()\n```{webr-r}\n# Use count() to get frequency tables\nbrown_fam_df |>\n  count(genre, variety)\n```\n\n### tabyl()\n```{webr-r}\n# Use tabyl() to get contingency tables\nbrown_fam_df |>\n  tabyl(genre, variety)\n```\n\n### group_by() + summarize()\n```{webr-r}\n# Use group_by() + summarize() to get pivot tables\nbrown_fam_df |>\n  group_by(genre) |>\n  summarize(\n    mean_words = mean(num_words),\n    sd_words = sd(num_words)\n  )\n```\n:::\n\n## Data summaries to tables{.smaller .scrollable}\n\n::: {.panel-tabset}\n### kable()\n```{webr-r}\nvariety_word_stats <-\n  brown_fam_df |>\n  group_by(variety) |>\n  summarize(\n    mean_words = mean(num_words),\n    sd_words = sd(num_words)\n  )\n\nvariety_word_stats |>\n  kable()\n```\n\n### kable() results\n\n::: {.cell}\n\n:::\n\n\n```{{r}}\n#| label: tbl-kable-results\n#| tbl-cap: \"Variety word statistics\"\n\nvariety_word_stats |>\n  kable()\n```\n\n\n::: {#tbl-kable-results .cell tbl-cap='Variety word statistics'}\n::: {.cell-output-display}\n\n\n|variety | mean_words|  sd_words|\n|:-------|----------:|---------:|\n|AmE     |   2166.765| 126.19290|\n|BrE     |   2164.112|  72.92651|\n\n\n:::\n:::\n\n:::\n\n## Visual summaries{.smaller .scrollable}\n\nDensity plots\n\n::: {.panel-tabset}\n### One variable\n```{webr-r}\n# Use geom_density() to visualize the distribution of num_words\nbrown_fam_df |>\n  ggplot(aes(x = num_words)) +   # specify the x-axis variable\n  geom_density()\n```\n\n### Two variables{.smaller .scrollable}\n```{webr-r}\n# Use geom_density() to visualize the distribution of num_words by variety\nbrown_fam_df |>\n  ggplot(aes(x = num_words, fill = variety)) + # specify the x-axis and fill variables\n  geom_density(alpha = 0.5)                   # specify alpha for transparency\n```\n:::\n\n## Visual summaries{.smaller .scrollable}\n\nBoxplots\n\n::: {.panel-tabset}\n### One variable\n```{webr-r}\n# Use geom_boxplot() to visualize the distribution of pass_verbs\nbrown_fam_df |>\n  ggplot(aes(x = pass_verbs)) + # specify the x-axis\n  geom_boxplot()                # create the boxplot\n```\n\n### Two variables\n```{webr-r}\n# Use geom_boxplot() to visualize the distribution of pass_verbs by variety\nbrown_fam_df |>\n  ggplot(aes(x = variety, y = pass_verbs)) + # specify the x-axis and y-axis\n  geom_boxplot()                            # create the boxplot\n```\n:::\n\n## Visual summaries{.smaller .scrollable}\n\nScatterplots\n\n::: {.panel-tabset}\n### Two variables\n```{webr-r}\n# Use geom_point() to visualize the relationship between num_words and verbs\nbrown_fam_df |>\n  ggplot(aes(x = num_words, y = verbs)) + # specify the x-axis and y-axis\n  geom_point()                                # create the scatterplot\n```\n### Two variables with trend line\n```{webr-r}\n# Use geom_point() and geom_smooth() to visualize the relationship between num_words and verbs\nbrown_fam_df |>\n  ggplot(aes(x = num_words, y = verbs)) + # specify the x-axis and y-axis\n  geom_point() +                              # create the scatterplot\n  geom_smooth(method = \"lm\")                  # add a trend line\n```\n:::\n\n# Lab 03: Trace the datascape\n\n## Setup\n\n- Clone the repository to RStudio as a new project\n- Follow the instructions in the `README.md` file\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}