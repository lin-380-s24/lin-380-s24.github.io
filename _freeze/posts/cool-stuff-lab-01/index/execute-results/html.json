{
  "hash": "e689d5399eeddb90e01221cfc80a70b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cool stuff: Lab 01\"\ndate: 2024-01-30\ncategories: [cool-stuff, quarto, citations]\n---\n\n\nIn this cool stuff, I just have a few things to share.\n\n## Using commenting in Quarto and R\n\nWhen writing documents in Quarto, you will often find yourself in a situation in which you would like to write some comments in the prose that only you will see and that will not appear in the final document. Think of these comments as notes to yourself (or to your collaborators). It's like 'speaker notes' for slide presentations.\n\nIn Markdown, you can use HTML comments to achieve this. For example, the following HTML comment will not appear in the final document:\n\n```markdown\n## This is a heading\n\n<!-- This is a comment that will not appear in the final document -->\n\nHere is my prose....\n\n```\n\nIn your labs, project steps, and self-assessments these comments may be helpful to you as you work through the steps and document the questions you need to answer or ideas that you have that will help you complete the task.\n\nWhen we write in code block, the comments have a different purpose. They are used to explain the code to others (and to yourself in the future). The comments will appear (if you use the `echo: true` option) in the final document. Here is an example of a comment in R:\n\n```r\n# Print my name\nprint(\"My name is Jerid Francom\")\n```\n\nI hope that these comments will help you as you work through the labs and projects!\n\n\n## Literature search 2.0\n\nThe WFU ZSR Library provides access for the WFU community to a couple of research tools that can help you with your literature search. These tools use AI to help you find the most relevant articles for your research. They are called [Elicit](https://elicit.com/) and [Scite](https://scite.ai/partners/students).\n\n::: {#fig-literature-search layout-ncol=2}\n\n![](elicit.png){#fig-elicit}\n\n![](scite.png){#fig-scite}\n\nAI tools for literature search\n:::\n\nCreate an account with your WFU email and start using these tools to find the most relevant articles for your research!\n\n## Bibliographies\n\nIn the previous lab, we learned how to add citations to our documents. By first adding the `bibliography:` key to the YAML front matter with a `*.bib` file as the value and then adding the `@` symbol followed by the citation key in the prose.\n\nThe somewhat more tricky aspect is getting the reference entries in the BiBTeX format. Once you have identified a source that you want to cite, you can sometimes find a link to create a BibTeX entry --but many times not.\n\nIn the latter case, you can use a DOI (Digital Object Identifier) and the [doi2bib.org](https://doi2bib.org) website to create the BiBTeX entry. Just identify the DOI, which generally appears in the article's metadata and has the form `10.1234/5678` (or something similar) and paste it into the website. The website will generate the BiBTeX entry for you. You can copy and paste this entry into your `*.bib` file. Use the citation key in the `@` symbol in the prose of your Quarto document.\n\n## Citation and reference styles\n\nThe BibTeX format is only a storage format. The style of the citations and the bibliography is determined by the style file that you use. The default style file in Quarto is the [Chicago Manual of Style](https://chicagomanualofstyle.org/).\n\nYou can change the style file by [downloading a new style file](https://github.com/citation-style-language/styles?search=1) (`.csl`), adding it to your project, and then using the `csl:` key in the front matter to specify the new style file.\n\n::: {#fig-csl-files}\n![](adding-csl-files.gif)\n\nAdding a new `.csl` file to your project\n:::\n\n## Quarto + other languages\n\nQuarto is a great tool for writing documents in which we combine prose (in Markdown) and R. But you should know that Quarto can also be used with other languages, such as Python, Julia, and Observable JavaScript. This is a great feature, as it allows you to use the best tool for the job, and to combine different languages in the same document!\n\n:::{#lst-r}\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, 3)\ny <- c(4, 5, 6)\n\nx %*% y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]   32\n```\n\n\n:::\n:::\n\nR code\n:::\n\n:::{#lst-python}\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n\nx = np.array([1, 2, 3])\ny = np.array([4, 5, 6])\n\nnp.dot(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n32\n```\n\n\n:::\n:::\n\nPython code\n:::\n\nAt the moment you have enough on your hands with Quarto + R. But it's good to know that you can expand your horizons in the future!\n\n## First look: figures\n\nI know a lot of you are really excited to get to the point where you can add figures to your documents. We cover figures head on soon!\n\nFor now, I want to introduce you to the `ggplot2` package, which is a great tool for creating figures in R. In @fig-brown-lob I don't expect you to understand this code, but if you are interested and have some time, you can take a look at the code and see if you can understand what it does.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-brown-lob\n#| fig-cap: \"Passive voice in the Brown (AmE) and LOB (BrE) corpora\"\n\n# Load packages\nlibrary(ggplot2)      # for plotting\nlibrary(dplyr)        # for data manipulation\nlibrary(corpora)      # for the BrownLOBPassives dataset\n\n# Get the dataset\ndata <- BrownLOBPassives |> as_tibble()\n\n# Create boxplot\ndata |>\n  ggplot(aes(\n    x = genre,\n    y = passive,\n    color = lang\n    )) +\n  geom_boxplot() +\n  labs(\n       x = \"Genre\",\n       y = \"Passive voice (count)\",\n       color = \"Language\"\n       ) +\n    coord_flip()\n```\n````\n\n::: {.cell-output-display}\n![Passive voice in the Brown (AmE) and LOB (BrE) corpora](index_files/figure-html/fig-brown-lob-1.png){#fig-brown-lob width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}